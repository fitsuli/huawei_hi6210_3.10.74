From 5e1e1c7b29f1affa17a48e6c0d7a23a3428123de Mon Sep 17 00:00:00 2001
From: Kostyan_nsk <kostyan_nsk@ngs.ru>
Date: Sat, 6 Feb 2016 21:54:05 +0800
Subject: [PATCH] Mali: fix GPU performance regression bug

---
 drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_control_timer.c       | 32 ++++-----
 drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_executor.c            | 65 ++++++++---------
 drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.c               | 81 +++++++++++++++++++---
 drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.h               | 16 +++--
 .../gpu/arm/mali4_64/r5p0_01rel0/platform/balong/mali_platform_dvfs.c  | 34 +++++----
 5 files changed, 152 insertions(+), 76 deletions(-)
 mode change 100644 => 100755 drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_control_timer.c
 mode change 100644 => 100755 drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_executor.c
 mode change 100644 => 100755 drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.c
 mode change 100644 => 100755 drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.h

diff --git a/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_control_timer.c b/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_control_timer.c
old mode 100644
new mode 100755
index 563242b..d0dd95a
--- a/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_control_timer.c
+++ b/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_control_timer.c
@@ -1,11 +1,11 @@
 /*
- * This confidential and proprietary software may be used only as
- * authorised by a licensing agreement from ARM Limited
- * (C) COPYRIGHT 2010-2012, 2014 ARM Limited
- * ALL RIGHTS RESERVED
- * The entire notice above must be reproduced on all authorised
- * copies and copies may only be made to the extent permitted
- * by a licensing agreement from ARM Limited.
+ * Copyright (C) 2010-2012, 2014-2015 ARM Limited. All rights reserved.
+ * 
+ * This program is free software and is provided to you under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation, and any use by you of this program is subject to the terms of such GNU licence.
+ * 
+ * A copy of the licence is included with the program, and can also be obtained from Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  */
 
 #include "mali_kernel_utilization.h"
@@ -33,7 +33,7 @@ static void mali_control_timer_callback(void *arg)
 	if (mali_utilization_enabled()) {
 		struct mali_gpu_utilization_data *util_data = NULL;
 		u64 time_period = 0;
-        mali_bool need_add_timer = MALI_TRUE;
+		mali_bool need_add_timer = MALI_TRUE;
 
 		/* Calculate gpu utilization */
 		util_data = mali_utilization_calculate(&period_start_time, &time_period, &need_add_timer);
@@ -44,10 +44,10 @@ static void mali_control_timer_callback(void *arg)
 #else
 			mali_utilization_platform_realize(util_data);
 #endif
-		}
 
-		if ((MALI_TRUE == need_add_timer) && (0 != util_data->utilization_gpu)) {
-			mali_control_timer_add(mali_control_timeout);
+			if (MALI_TRUE == need_add_timer) {
+				mali_control_timer_add(mali_control_timeout);
+			}
 		}
 	}
 }
@@ -86,7 +86,7 @@ void mali_control_timer_term(void)
 
 mali_bool mali_control_timer_resume(u64 time_now)
 {
-    mali_utilization_data_assert_locked();
+	mali_utilization_data_assert_locked();
 
 	if (timer_running != MALI_TRUE) {
 		timer_running = MALI_TRUE;
@@ -103,10 +103,10 @@ mali_bool mali_control_timer_resume(u64 time_now)
 
 void mali_control_timer_pause(void)
 {
-    mali_utilization_data_assert_locked();
-    if (timer_running == MALI_TRUE) {
-        timer_running = MALI_FALSE;
-    }
+	mali_utilization_data_assert_locked();
+	if (timer_running == MALI_TRUE) {
+		timer_running = MALI_FALSE;
+	}
 }
 
 void mali_control_timer_suspend(mali_bool suspend)
diff --git a/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_executor.c b/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_executor.c
old mode 100644
new mode 100755
index cd978ef..3e195cd
--- a/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_executor.c
+++ b/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_executor.c
@@ -1,11 +1,11 @@
 /*
- * This confidential and proprietary software may be used only as
- * authorised by a licensing agreement from ARM Limited
- * (C) COPYRIGHT 2012-2014 ARM Limited
- * ALL RIGHTS RESERVED
- * The entire notice above must be reproduced on all authorised
- * copies and copies may only be made to the extent permitted
- * by a licensing agreement from ARM Limited.
+ * Copyright (C) 2012-2015 ARM Limited. All rights reserved.
+ * 
+ * This program is free software and is provided to you under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation, and any use by you of this program is subject to the terms of such GNU licence.
+ * 
+ * A copy of the licence is included with the program, and can also be obtained from Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  */
 
 #include "mali_executor.h"
@@ -34,6 +34,7 @@
 /*
  * ---------- static type definitions (structs, enums, etc) ----------
  */
+
 enum mali_executor_state_t {
 	EXEC_STATE_NOT_PRESENT, /* Virtual group on Mali-300/400 (do not use) */
 	EXEC_STATE_DISABLED,    /* Disabled by core scaling (do not use) */
@@ -42,6 +43,7 @@ enum mali_executor_state_t {
 	EXEC_STATE_IDLE,        /* Active and ready to be used */
 	EXEC_STATE_WORKING,     /* Executing a job */
 };
+
 /*
  * ---------- global variables (exported due to inline functions) ----------
  */
@@ -610,6 +612,10 @@ _mali_osk_errcode_t mali_executor_interrupt_gp(struct mali_group *group,
 		struct mali_gp_job *job;
 		mali_bool success;
 
+		if (MALI_TRUE == time_out) {
+			mali_group_dump_status(group);
+		}
+
 		success = (int_result != MALI_INTERRUPT_RESULT_ERROR) ?
 			  MALI_TRUE : MALI_FALSE;
 
@@ -686,9 +692,6 @@ _mali_osk_errcode_t mali_executor_interrupt_pp(struct mali_group *group,
 	}
 #else
 	MALI_DEBUG_ASSERT(MALI_INTERRUPT_RESULT_NONE != int_result);
-	if (!mali_group_has_timed_out(group)) {
-		MALI_DEBUG_ASSERT(!mali_group_pp_is_active(group));
-	}
 #endif
 
 	/* We should now have a real interrupt to handle */
@@ -710,6 +713,10 @@ _mali_osk_errcode_t mali_executor_interrupt_pp(struct mali_group *group,
 		struct mali_pp_job *job = NULL;
 		mali_bool success;
 
+		if (MALI_TRUE == time_out) {
+			mali_group_dump_status(group);
+		}
+
 		success = (int_result == MALI_INTERRUPT_RESULT_SUCCESS) ?
 			  MALI_TRUE : MALI_FALSE;
 
@@ -930,19 +937,19 @@ void mali_executor_group_power_down(struct mali_group *groups[],
 
 	for (i = 0; i < num_groups; i++) {
 		/* Groups must be either disabled or inactive. while for virtual group,
-		* it maybe in empty state, because when we meet pm_runtime_suspend,
-		* virtual group could be powered off, and before we acquire mali_executor_lock,
-		* we must release mali_pm_state_lock, if there is a new physical job was queued,
-		* all of physical groups in virtual group could be pulled out, so we only can
-		* powered down an empty virtual group. Those physical groups will be powered
-		* up in following pm_runtime_resume callback function.
-		*/
+		 * it maybe in empty state, because when we meet pm_runtime_suspend,
+		 * virtual group could be powered off, and before we acquire mali_executor_lock,
+		 * we must release mali_pm_state_lock, if there is a new physical job was queued,
+		 * all of physical groups in virtual group could be pulled out, so we only can
+		 * powered down an empty virtual group. Those physical groups will be powered
+		 * up in following pm_runtime_resume callback function.
+		 */
 		MALI_DEBUG_ASSERT(mali_executor_group_is_in_state(groups[i],
-				EXEC_STATE_DISABLED) ||
-				mali_executor_group_is_in_state(groups[i],
-						EXEC_STATE_INACTIVE) ||
-				mali_executor_group_is_in_state(groups[i],
-						EXEC_STATE_EMPTY));
+				  EXEC_STATE_DISABLED) ||
+				  mali_executor_group_is_in_state(groups[i],
+						  EXEC_STATE_INACTIVE) ||
+				  mali_executor_group_is_in_state(groups[i],
+						  EXEC_STATE_EMPTY));
 
 		MALI_DEBUG_PRINT(3, ("Executor: powering down group %s\n",
 				     mali_group_core_description(groups[i])));
@@ -1451,8 +1458,8 @@ static mali_bool mali_executor_virtual_group_is_usable(void)
 {
 #if defined(CONFIG_MALI450)
 	MALI_DEBUG_ASSERT_EXECUTOR_LOCK_HELD();
-	return ((EXEC_STATE_INACTIVE == virtual_group_state ||
-		EXEC_STATE_IDLE == virtual_group_state)&&(virtual_group->state != MALI_GROUP_STATE_ACTIVATION_PENDING)) ?
+	return (EXEC_STATE_INACTIVE == virtual_group_state ||
+		EXEC_STATE_IDLE == virtual_group_state) ?
 	       MALI_TRUE : MALI_FALSE;
 #else
 	return MALI_FALSE;
@@ -2275,7 +2282,6 @@ static void mali_executor_core_scale(unsigned int target_core_nr)
 {
 	int current_core_scaling_mask[MALI_MAX_NUMBER_OF_DOMAINS] = { 0 };
 	int target_core_scaling_mask[MALI_MAX_NUMBER_OF_DOMAINS] = { 0 };
-	mali_bool update_global_core_scaling_mask = MALI_FALSE;
 	int i;
 
 	MALI_DEBUG_ASSERT(0 < target_core_nr);
@@ -2338,7 +2344,6 @@ static void mali_executor_core_scale(unsigned int target_core_nr)
 			struct mali_pm_domain *domain;
 
 			if (num_physical_pp_cores_enabled >= target_core_nr) {
-				update_global_core_scaling_mask = MALI_TRUE;
 				break;
 			}
 
@@ -2368,11 +2373,9 @@ static void mali_executor_core_scale(unsigned int target_core_nr)
 	 * Here, we may still have some pp cores not been enabled because of some
 	 * pp cores need to be disabled are still in working state.
 	 */
-	if (update_global_core_scaling_mask) {
-		for (i = 0; i < MALI_MAX_NUMBER_OF_DOMAINS; i++) {
-			if (0 < target_core_scaling_mask[i]) {
-				core_scaling_delay_up_mask[i] = target_core_scaling_mask[i];
-			}
+	for (i = 0; i < MALI_MAX_NUMBER_OF_DOMAINS; i++) {
+		if (0 < target_core_scaling_mask[i]) {
+			core_scaling_delay_up_mask[i] = target_core_scaling_mask[i];
 		}
 	}
 
diff --git a/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.c b/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.c
old mode 100644
new mode 100755
index 149100d..e02178d
--- a/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.c
+++ b/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.c
@@ -1,11 +1,11 @@
 /*
- * This confidential and proprietary software may be used only as
- * authorised by a licensing agreement from ARM Limited
- * (C) COPYRIGHT 2011-2014 ARM Limited
- * ALL RIGHTS RESERVED
- * The entire notice above must be reproduced on all authorised
- * copies and copies may only be made to the extent permitted
- * by a licensing agreement from ARM Limited.
+ * Copyright (C) 2011-2015 ARM Limited. All rights reserved.
+ * 
+ * This program is free software and is provided to you under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation, and any use by you of this program is subject to the terms of such GNU licence.
+ * 
+ * A copy of the licence is included with the program, and can also be obtained from Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  */
 #include "mali_kernel_common.h"
 #include "mali_group.h"
@@ -460,7 +460,7 @@ void mali_group_power_up(struct mali_group *group)
 	group->power_is_on = MALI_TRUE;
 
 	if (MALI_FALSE == mali_group_is_virtual(group)
-			&& MALI_FALSE == mali_group_is_in_virtual(group)) {
+	    && MALI_FALSE == mali_group_is_in_virtual(group)) {
 		mali_group_reset(group);
 	}
 
@@ -520,6 +520,71 @@ MALI_DEBUG_CODE(static void mali_group_print_virtual(struct mali_group *vgroup)
 	}
 })
 
+static void mali_group_dump_core_status(struct mali_group *group)
+{
+	u32 i;
+
+	MALI_DEBUG_ASSERT_POINTER(group);
+	MALI_DEBUG_ASSERT(NULL != group->gp_core || (NULL != group->pp_core && !mali_group_is_virtual(group)));
+
+	if (NULL != group->gp_core) {
+		MALI_PRINT(("Dump Group %s\n", group->gp_core->hw_core.description));
+
+		for (i = 0; i < 0xA8; i += 0x10) {
+			MALI_PRINT(("0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x\n", i, mali_hw_core_register_read(&group->gp_core->hw_core, i),
+				    mali_hw_core_register_read(&group->gp_core->hw_core, i + 4),
+				    mali_hw_core_register_read(&group->gp_core->hw_core, i + 8),
+				    mali_hw_core_register_read(&group->gp_core->hw_core, i + 12)));
+		}
+
+
+	} else {
+		MALI_PRINT(("Dump Group %s\n", group->pp_core->hw_core.description));
+
+		for (i = 0; i < 0x5c; i += 0x10) {
+			MALI_PRINT(("0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x\n", i, mali_hw_core_register_read(&group->pp_core->hw_core, i),
+				    mali_hw_core_register_read(&group->pp_core->hw_core, i + 4),
+				    mali_hw_core_register_read(&group->pp_core->hw_core, i + 8),
+				    mali_hw_core_register_read(&group->pp_core->hw_core, i + 12)));
+		}
+
+		/* Ignore some minor registers */
+		for (i = 0x1000; i < 0x1068; i += 0x10) {
+			MALI_PRINT(("0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x\n", i, mali_hw_core_register_read(&group->pp_core->hw_core, i),
+				    mali_hw_core_register_read(&group->pp_core->hw_core, i + 4),
+				    mali_hw_core_register_read(&group->pp_core->hw_core, i + 8),
+				    mali_hw_core_register_read(&group->pp_core->hw_core, i + 12)));
+		}
+	}
+
+	MALI_PRINT(("Dump Group MMU\n"));
+	for (i = 0; i < 0x24; i += 0x10) {
+		MALI_PRINT(("0x%04x: 0x%08x 0x%08x 0x%08x 0x%08x\n", i, mali_hw_core_register_read(&group->mmu->hw_core, i),
+			    mali_hw_core_register_read(&group->mmu->hw_core, i + 4),
+			    mali_hw_core_register_read(&group->mmu->hw_core, i + 8),
+			    mali_hw_core_register_read(&group->mmu->hw_core, i + 12)));
+	}
+}
+
+
+/**
+ * @Dump group status
+ */
+void mali_group_dump_status(struct mali_group *group)
+{
+	MALI_DEBUG_ASSERT_POINTER(group);
+
+	if (mali_group_is_virtual(group)) {
+		struct mali_group *group_c;
+		struct mali_group *temp;
+		_MALI_OSK_LIST_FOREACHENTRY(group_c, temp, &group->group_list, struct mali_group, group_list) {
+			mali_group_dump_core_status(group_c);
+		}
+	} else {
+		mali_group_dump_core_status(group);
+	}
+}
+
 /**
  * @brief Add child group to virtual group parent
  */
diff --git a/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.h b/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.h
old mode 100644
new mode 100755
index 4fdaf7f..efcd7dc
--- a/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.h
+++ b/drivers/gpu/arm/mali4_64/r5p0_01rel0/common/mali_group.h
@@ -1,11 +1,11 @@
 /*
- * This confidential and proprietary software may be used only as
- * authorised by a licensing agreement from ARM Limited
- * (C) COPYRIGHT 2011-2014 ARM Limited
- * ALL RIGHTS RESERVED
- * The entire notice above must be reproduced on all authorised
- * copies and copies may only be made to the extent permitted
- * by a licensing agreement from ARM Limited.
+ * Copyright (C) 2011-2015 ARM Limited. All rights reserved.
+ * 
+ * This program is free software and is provided to you under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation, and any use by you of this program is subject to the terms of such GNU licence.
+ * 
+ * A copy of the licence is included with the program, and can also be obtained from Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  */
 
 #ifndef __MALI_GROUP_H__
@@ -96,6 +96,8 @@ struct mali_group *mali_group_create(struct mali_l2_cache_core *core,
 				     struct mali_bcast_unit *bcast,
 				     u32 domain_index);
 
+void mali_group_dump_status(struct mali_group *group);
+
 void mali_group_delete(struct mali_group *group);
 
 _mali_osk_errcode_t mali_group_add_mmu_core(struct mali_group *group,
